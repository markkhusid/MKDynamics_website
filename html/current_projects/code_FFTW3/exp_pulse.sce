//Frequency components of a signal
//----------------------------------
// Build a exponential pulse that starts at t=0.  The pulse will
// be generated by multiplying a 100% duty cycle square wave
// that starts at t=0 with an exponential.

// Clear memory
clear;

// Inital assignments
sample_rate=1000;                   // Set sample rate
frequency_sqw=1;                    // Set frequency of square wave
time_constant=10;                   // Set time constant of exponential
t = 0:1/sample_rate:1;              // Set up time "vector"
N=size(t,'*');                      // number of samples is size of time vector
Num_freq_intervals=10;              // Number of intervals on freq axis

// Generate exponential pulse
// First generate square wave of 2*pi*frequency at 100% duty cycle
// Since square wave is +1 to -1, apply offset and scaling of 0.5
sqw = ((squarewave(2*%pi*frequency_sqw*t,100))+1)*0.5;
// Multiply square wave by exponential with time_constant to obtain exponential
// pulse
ep = sqw .* (exp(-time_constant*t));

// Apply Hamming window
//************************
// Use lines below to tweak filter characteristics
//[h,hm,fr] = wfir('lp',33,[.2 0],'hm',[0 0]);
//z = poly(0,'z');
//hz = syslin('d',poly(h,'z','c')./z**33);
//y_hm = flts(ep,hz);
// ************************

// Use lines below to use standard Hamming window
// ************************
win_hm = window('hm',N);                // Generate Hamming window vector
y_hm= ep .* win_hm;                     // Apply Hamming window to exp pulse 
// ************************

// Perfrom FFT on windowed time domain function.  y will be a complex vector
y=fft(y_hm);

// Since the exponential pulse is real,the fft response is conjugate symmetric 
// and we retain only the first N/2 points

// Associated frequency vector for magnitude of FFT
f_mag=time_constant*(0:Num_freq_intervals/2); 
// Size of frequency vector for magnitude of FFT
n_mag=size(f_mag,'*');
// Associated frequency vector for phase of FFT
f_phase=time_constant.*(0:Num_freq_intervals/2);
// Size of frequency vector for phase of FFT
n_phase=size(f_phase,'*');

// Perform complex math to extract magnitudes and phases
// Obtain magnitude and normalize to first element so that peak is at 
// 1/time_constant
y_mag=(abs(y)./y(1))*1/time_constant;
// Generate the ideal freq domain equation to compare our results
y_mag_ideal=1 ./ (sqrt(time_constant^2+f_mag.^2));
// Get the phase and convert from rads to degrees
y_phase=(-atan(f_phase ./ time_constant)) .* (180/%pi);

// Genrate Plots
// ************************
h=0;                                   // Graphics handle
scf(h);                                // Set as current plot
xset('window',h);                      // Set window to current graphics handle    
xtitle('f(t)', 'Time [s]', 'Amplitude [Arb]');    // Set title and axes
plot(t,ep(1:N));


h=1; //Graphics handle
scf(h);
xset('window',h);
xtitle('FFT(f(t))', 'Freq [Hz]', 'Amplitude [Arb - Linear]');
plot(f_mag,y(1:n_mag));

h=2; //Graphics handle
scf(h);
xset('window',h);
xtitle('FFT Magnitude', 'Freq [Hz]', 'Normalized Amplitude [Arb - Linear]');
// Here we make two plots to compare resulting magnitude to ideal magnitude
plot(f_mag,(y_mag(1:n_mag)), 'r-');
plot(f_mag,(y_mag_ideal(1:n_mag)), 'b-');
hl = legend(['Resulting FFT Magnitude';'Ideal FFT Magnitude'])

h=3; //Graphics handle
scf(h);
xset('window',h);
xtitle('FFT Phase', 'Freq [Hz]', 'Phase [degrees]');
plot(f_phase,(y_phase(1:n_phase)))
